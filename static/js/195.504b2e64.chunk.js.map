{"version":3,"file":"static/js/195.504b2e64.chunk.js","mappings":"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","sources":["../node_modules/@ethersproject/networks/src.ts/index.ts","../node_modules/@ethersproject/networks/src.ts/_version.ts","../node_modules/@ethersproject/providers/src.ts/_version.ts","../node_modules/@ethersproject/providers/src.ts/formatter.ts","../node_modules/@ethersproject/constants/src.ts/addresses.ts","../node_modules/@ethersproject/providers/src.ts/base-provider.ts","../node_modules/@ethersproject/constants/src.ts/hashes.ts","../node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts","../node_modules/@ethersproject/web/src.ts/browser-geturl.ts","../node_modules/@ethersproject/web/src.ts/index.ts","../node_modules/@ethersproject/web/src.ts/_version.ts","../node_modules/alchemy-sdk/node_modules/@ethersproject/logger/lib.esm/index.js","../node_modules/alchemy-sdk/node_modules/@ethersproject/logger/lib.esm/_version.js","../node_modules/alchemy-sdk/node_modules/@ethersproject/properties/lib.esm/_version.js","../node_modules/alchemy-sdk/node_modules/@ethersproject/properties/lib.esm/index.js","../node_modules/alchemy-sdk/src/internal/request-batcher.ts","../node_modules/alchemy-sdk/src/api/alchemy-provider.ts","../node_modules/bech32/index.js"],"sourcesContent":["\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Network, Networkish } from \"./types\";\n\nexport {\n    Network,\n    Networkish\n};\n\ntype DefaultProviderFunc = (providers: any, options?: any) => any;\n\ninterface Renetworkable extends DefaultProviderFunc {\n    renetwork: (network: Network) => DefaultProviderFunc;\n};\n\nfunction isRenetworkable(value: any): value is Renetworkable {\n    return (value && typeof(value.renetwork) === \"function\");\n}\n\nfunction ethDefaultProvider(network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (options == null) { options = { }; }\n        const providerList: Array<any> = [];\n\n        if (providers.InfuraProvider && options.infura !== \"-\") {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            } catch(error) { }\n        }\n\n        if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n            try {\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            } catch(error) { }\n        }\n\n        if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            } catch(error) { }\n        }\n\n        if (providers.PocketProvider && options.pocket !== \"-\") {\n            // These networks are currently faulty on Pocket as their\n            // network does not handle the Berlin hardfork, which is\n            // live on these ones.\n            // @TODO: This goes away once Pocket has upgraded their nodes\n            const skip = [ \"goerli\", \"ropsten\", \"rinkeby\", \"sepolia\" ];\n            try {\n                const provider = new providers.PocketProvider(network, options.pocket);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            } catch(error) { }\n        }\n\n        if (providers.AnkrProvider && options.ankr !== \"-\") {\n            try {\n                const skip = [ \"ropsten\" ];\n                const provider = new providers.AnkrProvider(network, options.ankr);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providerList.length === 0) { return null; }\n\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            } else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n\n        return providerList[0];\n    };\n\n    func.renetwork = function(network: Network) {\n        return ethDefaultProvider(network);\n    };\n\n    return func;\n}\n\nfunction etcDefaultProvider(url: string, network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n\n        return null;\n    };\n\n    func.renetwork = function(network: Network) {\n        return etcDefaultProvider(url, network);\n    };\n\n    return func;\n}\n\nconst homestead: Network = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\n\nconst ropsten: Network = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\n\nconst classicMordor: Network = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n\n// See: https://chainlist.org\nconst networks: { [name: string]: Network } = {\n    unspecified: { chainId: 0, name: \"unspecified\" },\n\n    homestead: homestead,\n    mainnet: homestead,\n\n    morden: { chainId: 2, name: \"morden\" },\n\n    ropsten: ropsten,\n    testnet: ropsten,\n\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n    },\n\n    kintsugi: { chainId: 1337702, name: \"kintsugi\" },\n\n    sepolia: {\n        chainId: 11155111,\n        name: \"sepolia\",\n        _defaultProvider: ethDefaultProvider(\"sepolia\")\n    },\n\n\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n    },\n\n    classicMorden: { chainId: 62, name: \"classicMorden\" },\n\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n\n    xdai: { chainId: 100, name: \"xdai\" },\n\n    matic: {\n        chainId: 137,\n        name: \"matic\",\n        _defaultProvider: ethDefaultProvider(\"matic\")\n    },\n    maticmum: { chainId: 80001, name: \"maticmum\" },\n\n    optimism: {\n        chainId: 10,\n        name: \"optimism\",\n        _defaultProvider: ethDefaultProvider(\"optimism\")\n    },\n    \"optimism-kovan\": { chainId: 69, name: \"optimism-kovan\" },\n    \"optimism-goerli\": { chainId: 420, name: \"optimism-goerli\" },\n\n    arbitrum: { chainId: 42161, name: \"arbitrum\" },\n    \"arbitrum-rinkeby\": { chainId: 421611, name: \"arbitrum-rinkeby\" },\n    \"arbitrum-goerli\": { chainId: 421613, name: \"arbitrum-goerli\" },\n\n    bnb: { chainId: 56, name: \"bnb\" },\n    bnbt: { chainId: 97, name: \"bnbt\" },\n}\n\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network: Networkish): Network {\n    // No network (null)\n    if (network == null) { return null; }\n\n    if (typeof(network) === \"number\") {\n        for (const name in networks) {\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: (standard.ensAddress || null),\n                    _defaultProvider: (standard._defaultProvider || null)\n                };\n            }\n        }\n\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n\n    if (typeof(network) === \"string\") {\n        const standard = networks[network];\n        if (standard == null) { return null; }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: (standard._defaultProvider || null)\n        };\n    }\n\n    const standard  = networks[network.name];\n\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof(network.chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n\n    // @TODO: In the next major version add an attach function to a defaultProvider\n    // class and move the _defaultProvider internal to this file (extend Network)\n    let defaultProvider: DefaultProviderFunc = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n            defaultProvider = standard._defaultProvider.renetwork(network);\n        } else {\n            defaultProvider = standard._defaultProvider;\n        }\n    }\n\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\n        _defaultProvider: defaultProvider\n    };\n}\n","export const version = \"networks/5.7.1\";\n","export const version = \"providers/5.7.2\";\n","\"use strict\";\n\nimport { Block, TransactionReceipt, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport type FormatFunc = (value: any) => any;\n\nexport type FormatFuncs = { [ key: string ]: FormatFunc };\n\nexport type Formats = {\n    transaction: FormatFuncs,\n    transactionRequest: FormatFuncs,\n    receipt: FormatFuncs,\n    receiptLog: FormatFuncs,\n    block: FormatFuncs,\n    blockWithTransactions: FormatFuncs,\n    filter: FormatFuncs,\n    filterLog: FormatFuncs,\n};\n\nexport class Formatter {\n    readonly formats: Formats;\n\n    constructor() {\n        this.formats = this.getDefaultFormats();\n    }\n\n    getDefaultFormats(): Formats {\n        const formats: Formats = <Formats>({ });\n\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n\n        const strictData = (v: any) => { return this.data(v, true); };\n\n        formats.transaction = {\n            hash: hash,\n\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n\n            confirmations: Formatter.allowNull(number, null),\n\n            from: address,\n\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n\n            creates: Formatter.allowNull(address, null),\n\n            raw: Formatter.allowNull(data),\n        };\n\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),// @TODO: should this be data?\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n\n            miner: Formatter.allowNull(address),\n            extraData: data,\n\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n\n            topics: Formatter.arrayOf(hash),\n\n            transactionHash: hash,\n            logIndex: number,\n        };\n\n        return formats;\n    }\n\n    accessList(accessList: Array<any>): AccessList {\n        return accessListify(accessList || []);\n    }\n\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number: any): number {\n        if (number === \"0x\") { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    type(number: any): number {\n        if (number === \"0x\" || number == null) { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    // Strict! Used on input.\n    bigNumber(value: any): BigNumber {\n        return BigNumber.from(value);\n    }\n\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value: any): boolean {\n        if (typeof(value) === \"boolean\") { return value; }\n        if (typeof(value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") { return true; }\n            if (value === \"false\") { return false; }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n\n    hex(value: any, strict?: boolean): string {\n        if (typeof(value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n            if (isHexString(value)) {\n               return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    data(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n\n    // Requires an address\n    // Strict! Used on input.\n    address(value: any): string {\n        return getAddress(value);\n    }\n\n    callAddress(value: any): string {\n        if (!isHexString(value, 32)) { return null; }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null: address;\n    }\n\n    contractAddress(value: any): string {\n        return getContractAddress(value);\n    }\n\n    // Strict! Used on input.\n    blockTag(blockTag: any): string {\n        if (blockTag == null) { return \"latest\"; }\n\n        if (blockTag === \"earliest\") { return \"0x0\"; }\n\n        switch (blockTag) {\n            case \"earliest\": return \"0x0\";\n            case \"latest\": case \"pending\": case \"safe\": case \"finalized\":\n                return blockTag;\n        }\n\n        if (typeof(blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(<number | string>blockTag);\n        }\n\n        throw new Error(\"invalid blockTag\");\n    }\n\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value: any): number {\n        if (value == null) { return null; }\n\n        const v = BigNumber.from(value);\n\n        try {\n            return v.toNumber();\n        } catch (error) { }\n\n       return null;\n    }\n\n    uint256(value: any): string {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n\n    _block(value: any, format: any): Block {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty: value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null: BigNumber.from(difficulty));\n        return result;\n    }\n\n    block(value: any): Block {\n        return this._block(value, this.formats.block);\n    }\n\n    blockWithTransactions(value: any): Block {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n\n    // Strict! Used on input.\n    transactionRequest(value: any): any {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n\n    transactionResponse(transaction: any): TransactionResponse {\n\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n\n        if ((transaction.type === 1 || transaction.type === 2)&& transaction.accessList == null) {\n            transaction.accessList = [ ];\n        }\n\n        const result: TransactionResponse = Formatter.check(this.formats.transaction, transaction);\n\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            result.chainId = chainId;\n\n        } else {\n            let chainId = transaction.networkId;\n\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            if (typeof(chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) { chainId = 0; }\n                chainId = parseInt(chainId);\n            }\n\n            if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n            result.chainId = chainId;\n        }\n\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n\n        return result;\n    }\n\n    transaction(value: any): any {\n        return parseTransaction(value);\n    }\n\n    receiptLog(value: any): any {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n\n    receipt(value: any): TransactionReceipt {\n        const result: TransactionReceipt = Formatter.check(this.formats.receipt, value);\n\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                } else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            } else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n\n        return result;\n    }\n\n    topics(value: any): any {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n\n        } else if (value != null) {\n            return this.hash(value, true);\n        }\n\n        return null;\n    }\n\n    filter(value: any): any {\n        return Formatter.check(this.formats.filter, value);\n    }\n\n    filterLog(value: any): any {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n\n    static check(format: { [ name: string ]: FormatFunc }, object: any): any {\n        const result: any = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) { result[key] = value; }\n            } catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n\n    // if value is null-ish, nullValue is returned\n    static allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n        return (function(value: any) {\n            if (value == null) { return nullValue; }\n            return format(value);\n        });\n    }\n\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format: FormatFunc, replaceValue: any): FormatFunc {\n        return (function(value: any) {\n            if (!value) { return replaceValue; }\n            return format(value);\n        });\n    }\n\n    // Requires an Array satisfying check\n    static arrayOf(format: FormatFunc): FormatFunc {\n        return (function(array: any): Array<any> {\n            if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n\n            const result: any = [];\n\n            array.forEach(function(value) {\n                result.push(format(value));\n            });\n\n            return result;\n        });\n    }\n}\n\nexport interface CommunityResourcable {\n    isCommunityResource(): boolean;\n}\n\nexport function isCommunityResourcable(value: any): value is CommunityResourcable {\n    return (value && typeof(value.isCommunityResource) === \"function\");\n}\n\nexport function isCommunityResource(value: any): boolean {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) { return; }\n    throttleMessage = true;\n\n    console.log(\"========= NOTICE =========\")\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n\n","export const AddressZero = \"0x0000000000000000000000000000000000000000\";\n\n","\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork, Network, Networkish } from \"@ethersproject/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { Transaction } from \"@ethersproject/transactions\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\n\nimport bech32 from \"bech32\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\nconst MAX_CCIP_REDIRECTS = 10;\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n     if (topic == null) { return \"null\"; }\n     if (hexDataLength(topic) !== 32) {\n         logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n     }\n     return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n\n            // Only track unique OR-topics\n            const unique: { [ topic: string ]: boolean } = { }\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n\n            return sorted.join(\"|\");\n\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n    if (data === \"\") { return [ ]; }\n\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") { return [ ]; }\n\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null: topic);\n        });\n\n        return ((comps.length === 1) ? comps[0]: comps);\n    });\n}\n\nfunction getEventTag(eventName: EventType): string {\n    if (typeof(eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n\n    } else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n\n    } else if (eventName && typeof(eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n\n    throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n    return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n    readonly listener: Listener;\n    readonly once: boolean;\n    readonly tag: string;\n\n    _lastBlockNumber: number\n    _inflight: boolean;\n\n    constructor(tag: string, listener: Listener, once: boolean) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n\n    get event(): EventType {\n        switch (this.type) {\n            case \"tx\":\n               return this.hash;\n            case \"filter\":\n               return this.filter;\n        }\n        return this.tag;\n    }\n\n    get type(): string {\n        return this.tag.split(\":\")[0]\n    }\n\n    get hash(): string {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") { return null; }\n        return comps[1];\n    }\n\n    get filter(): Filter {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") { return null; }\n        const address = comps[1];\n\n        const topics = deserializeTopics(comps[2]);\n        const filter: Filter = { };\n\n        if (topics.length > 0) { filter.topics = topics; }\n        if (address && address !== \"*\") { filter.address = address; }\n\n        return filter;\n    }\n\n    pollable(): boolean {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n\nexport interface EnsResolver {\n\n    // Name this Resolver is associated with\n    readonly name: string;\n\n    // The address of the resolver\n    readonly address: string;\n\n    // Multichain address resolution (also normal address resolution)\n    // See: https://eips.ethereum.org/EIPS/eip-2304\n    getAddress(coinType?: 60): Promise<null | string>\n\n    // Contenthash field\n    // See: https://eips.ethereum.org/EIPS/eip-1577\n    getContentHash(): Promise<null | string>;\n\n    // Storage of text records\n    // See: https://eips.ethereum.org/EIPS/eip-634\n    getText(key: string): Promise<null | string>;\n};\n\nexport interface EnsProvider {\n    resolveName(name: string): Promise<null | string>;\n    lookupAddress(address: string): Promise<null | string>;\n    getResolver(name: string): Promise<null | EnsResolver>;\n}\n\ntype CoinInfo = {\n    symbol: string,\n    ilk?: string,     // General family\n    prefix?: string,  // Bech32 prefix\n    p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n    p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n    \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n    \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport interface Avatar {\n    url: string;\n    linkage: Array<{ type: string, content: string }>;\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\nfunction _parseString(result: string, start: number): null | string {\n    try {\n        return toUtf8String(_parseBytes(result, start));\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string, start: number): null | string {\n    if (result === \"0x\") { return null; }\n\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link: string): string {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    } else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n\n    return `https:/\\/gateway.ipfs.io/ipfs/${ link }`;\n}\n\nfunction numPad(value: number): Uint8Array {\n    const result = arrayify(value);\n    if (result.length > 32) { throw new Error(\"internal; should not happen\"); }\n\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\n\nfunction bytesPad(value: Uint8Array): Uint8Array {\n    if ((value.length % 32) === 0) { return value; }\n\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas: Array<BytesLike>) {\n    const result: Array<Uint8Array> = [ ];\n\n    let byteCount = 0;\n\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n\n    for (let i = 0; i < datas.length; i++) {\n        const data = arrayify(datas[i]);\n\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n\n    return hexConcat(result);\n}\n\nexport class Resolver implements EnsResolver {\n    readonly provider: BaseProvider;\n\n    readonly name: string;\n    readonly address: string;\n\n    readonly _resolvedAddress: null | string;\n\n    // For EIP-2544 names, the ancestor that provided the resolver\n    _supportsEip2544: null | Promise<boolean>;\n\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider: BaseProvider, address: string, name: string, resolvedAddress?: string) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n\n    supportsWildcard(): Promise<boolean> {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n                return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return false; }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n\n        return this._supportsEip2544;\n    }\n\n    async _fetch(selector: string, parameters?: string): Promise<null | string> {\n\n        // e.g. keccak256(\"addr(bytes32,uint256)\")\n        const tx = {\n            to: this.address,\n            ccipReadEnabled: true,\n            data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n        };\n\n        // Wildcard support; use EIP-2544 to resolve the request\n        let parseBytes = false;\n        if (await this.supportsWildcard()) {\n            parseBytes = true;\n\n            // selector(\"resolve(bytes,bytes)\")\n            tx.data = hexConcat([ \"0x9061b923\", encodeBytes([ dnsEncode(this.name), tx.data ]) ]);\n        }\n\n        try {\n            let result = await this.provider.call(tx);\n            if ((arrayify(result).length % 32) === 4) {\n                logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                    transaction: tx, data: result\n                });\n            }\n            if (parseBytes) { result = _parseBytes(result, 0); }\n            return result;\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async _fetchBytes(selector: string, parameters?: string): Promise<null | string> {\n        const result = await this._fetch(selector, parameters);\n        if (result != null) { return _parseBytes(result, 0); }\n        return null;\n    }\n\n    _getAddress(coinType: number, hexBytes: string): string {\n        const coinInfo = coinInfos[String(coinType)];\n\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`\n            });\n        }\n\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n\n        const bytes = arrayify(hexBytes);\n\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n                }\n            }\n        }\n\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n                }\n            }\n        }\n\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n\n        return null;\n    }\n\n\n    async getAddress(coinType?: number): Promise<string> {\n        if (coinType == null) { coinType = 60; }\n\n        // If Ethereum, use the standard `addr(bytes32)`\n        if (coinType === 60) {\n            try {\n                // keccak256(\"addr(bytes32)\")\n                const result = await this._fetch(\"0x3b3b57de\");\n\n                // No address\n                if (result === \"0x\" || result === HashZero) { return null; }\n\n                return this.provider.formatter.callAddress(result);\n            } catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n                throw error;\n            }\n        }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n        // No address\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // Compute the address\n        const address = this._getAddress(coinType, hexBytes);\n\n        if (address == null) {\n            logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`,\n                coinType: coinType,\n                data: hexBytes\n            });\n        }\n\n        return address;\n    }\n\n    async getAvatar(): Promise<null | Avatar> {\n        const linkage: Array<{ type: string, content: string }> = [ { type: \"name\", content: this.name } ];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) { return null; }\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n                if (match == null) { continue; }\n\n                const scheme = match[1].toLowerCase();\n\n                switch (scheme) {\n                    case \"https\":\n                        linkage.push({ type: \"url\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"data\":\n                        linkage.push({ type: \"data\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"ipfs\":\n                        linkage.push({ type: \"ipfs\", content: avatar });\n                        return { linkage, url: getIpfsLink(avatar) };\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (scheme === \"erc721\") ? \"0xc87b56dd\": \"0x0e89341c\";\n                        linkage.push({ type: scheme, content: avatar });\n\n                        // The owner of this name\n                        const owner = (this._resolvedAddress || await this.getAddress());\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) { return null; }\n\n                        const addr = await this.provider.formatter.address(comps[0]);\n                        const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n\n                        // Check that this account owns the token\n                        if (scheme === \"erc721\") {\n                            // ownerOf(uint256 tokenId)\n                            const tokenOwner = this.provider.formatter.callAddress(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x6352211e\", tokenId ])\n                            }));\n                            if (owner !== tokenOwner) { return null; }\n                            linkage.push({ type: \"owner\", content: tokenOwner });\n\n                        } else if (scheme === \"erc1155\") {\n                            // balanceOf(address owner, uint256 tokenId)\n                            const balance = BigNumber.from(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x00fdd58e\", hexZeroPad(owner, 32), tokenId ])\n                            }));\n                            if (balance.isZero()) { return null; }\n                            linkage.push({ type: \"balance\", content: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        const tx = {\n                            to: this.provider.formatter.address(comps[0]),\n                            data: hexConcat([ selector, tokenId ])\n                        };\n\n                        let metadataUrl = _parseString(await this.provider.call(tx), 0);\n                        if (metadataUrl == null) { return null; }\n                        linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (scheme === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                            linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                        }\n\n                        // Transform IPFS metadata links\n                        if (metadataUrl.match(/^ipfs:/i)) {\n                            metadataUrl = getIpfsLink(metadataUrl);\n                        }\n\n                        linkage.push({ type: \"metadata-url\", content: metadataUrl });\n\n                        // Get the token metadata\n                        const metadata = await fetchJson(metadataUrl);\n                        if (!metadata) { return null; }\n                        linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n\n                        // Pull the image URL out\n                        let imageUrl = metadata.image;\n                        if (typeof(imageUrl) !== \"string\") { return null; }\n\n                        if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                        } else {\n                            // Transform IPFS link to gateway\n                            const ipfs = imageUrl.match(matcherIpfs);\n                            if (ipfs == null) { return null; }\n\n                            linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                            imageUrl = getIpfsLink(imageUrl);\n                        }\n\n                        linkage.push({ type: \"url\", content: imageUrl });\n\n                        return { linkage, url: imageUrl };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return null;\n    }\n\n    async getContentHash(): Promise<string> {\n\n        // keccak256(\"contenthash()\")\n        const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n        // No contenthash\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: DAG-PB)\n        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const length = parseInt(ipfs[3], 16);\n            if (ipfs[4].length === length * 2) {\n                return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n            }\n        }\n\n        // IPNS (CID: 1, Type: libp2p-key)\n        const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipns) {\n            const length = parseInt(ipns[3], 16);\n            if (ipns[4].length === length * 2) {\n                return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm) {\n            if (swarm[1].length === (32 * 2)) {\n                return \"bzz:/\\/\" + swarm[1]\n            }\n        }\n\n        const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n        if (skynet) {\n            if (skynet[1].length === (34 * 2)) {\n                // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                const urlSafe: Record<string, string> = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n                const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a) => (urlSafe[a]));\n                return \"sia:/\\/\" + hash;\n            }\n        }\n\n        return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getContentHash()\",\n            data: hexBytes\n        });\n    }\n\n    async getText(key: string): Promise<string> {\n\n        // The key encoded as parameter to fetchBytes\n        let keyBytes = toUtf8Bytes(key);\n\n        // The nodehash consumes the first slot, so the string pointer targets\n        // offset 64, with the length at offset 64 and data starting at offset 96\n        keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n        // Pad to word-size (32 bytes)\n        if ((keyBytes.length % 32) !== 0) {\n            keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n        }\n\n        const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        return toUtf8String(hexBytes);\n    }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n    _networkPromise: Promise<Network>;\n    _network: Network;\n\n    _events: Array<Event>;\n\n    formatter: Formatter;\n\n    // To help mitigate the eventually consistent nature of the blockchain\n    // we keep a mapping of events we emit. If we emit an event X, we expect\n    // that a user should be able to query for that event in the callback,\n    // if the node returns null, we stall the response until we get back a\n    // meaningful value, since we may be hitting a re-org, or a node that\n    // has not indexed the event yet.\n    // Events:\n    //   - t:{hash}    - Transaction hash\n    //   - b:{hash}    - BlockHash\n    //   - block       - The most recent emitted block\n    _emitted: { [ eventName: string ]: number | \"pending\" };\n\n    _pollingInterval: number;\n    _poller: NodeJS.Timer;\n    _bootstrapPoll: NodeJS.Timer;\n\n    _lastBlockNumber: number;\n    _maxFilterBlockRange: number;\n\n    _fastBlockNumber: number;\n    _fastBlockNumberPromise: Promise<number>;\n    _fastQueryDate: number;\n\n    _maxInternalBlockNumber: number;\n    _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n    readonly anyNetwork: boolean;\n\n    disableCcipRead: boolean;\n\n\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n\n    constructor(network: Networkish | Promise<Network>) {\n        super();\n\n        // Events being listened to\n        this._events = [];\n\n        this._emitted = { block: -2 };\n\n        this.disableCcipRead = false;\n\n        this.formatter = new.target.getFormatter();\n\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) { network = this.detectNetwork(); }\n\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n\n        } else {\n            const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n\n        this._maxInternalBlockNumber = -1024;\n\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n\n        this._pollingInterval = 4000;\n\n        this._fastQueryDate = 0;\n    }\n\n    async _ready(): Promise<Network> {\n        if (this._network == null) {\n            let network: Network = null;\n            if (this._networkPromise) {\n                try {\n                    network = await this._networkPromise;\n                } catch (error) { }\n            }\n\n            // Try the Provider's network detection (this MUST throw if it cannot)\n            if (network == null) {\n                network = await this.detectNetwork();\n            }\n\n            // This should never happen; every Provider sub-class should have\n            // suggested a network by here (or have thrown).\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // Possible this call stacked so do not call defineReadOnly again\n            if (this._network == null) {\n                if (this.anyNetwork) {\n                    this._network = network;\n                } else {\n                    defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n            }\n        }\n\n        return this._network;\n    }\n\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready(): Promise<Network> {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter(): Formatter {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network: Networkish): Network {\n        return getNetwork((network == null) ? \"homestead\": network);\n    }\n\n    async ccipReadFetch(tx: Transaction, calldata: string, urls: Array<string>): Promise<null | string> {\n        if (this.disableCcipRead || urls.length === 0) { return null; }\n\n        const sender = tx.to.toLowerCase();\n        const data = calldata.toLowerCase();\n\n        const errorMessages: Array<string> = [ ];\n\n        for (let i = 0; i < urls.length; i++) {\n            const url = urls[i];\n\n            // URL expansion\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n\n            // If no {data} is present, use POST; otherwise GET\n            const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n\n            const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                value.status = response.statusCode;\n                return value;\n            });\n\n            if (result.data) { return result.data; }\n\n            const errorMessage = (result.message || \"unknown error\");\n\n            // 4xx indicates the result is not present; stop\n            if (result.status >= 400 && result.status < 500) {\n                return logger.throwError(`response not found during CCIP fetch: ${ errorMessage }`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n            }\n\n            // 5xx indicates server issue; try the next url\n            errorMessages.push(errorMessage);\n        }\n\n        return logger.throwError(`error encountered during CCIP fetch: ${ errorMessages.map((m) => JSON.stringify(m)).join(\", \") }`, Logger.errors.SERVER_ERROR, {\n            urls, errorMessages\n        });\n    }\n\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    async _getInternalBlockNumber(maxAge: number): Promise<number> {\n        await this._ready();\n\n        // Allowing stale data up to maxAge old\n        if (maxAge > 0) {\n\n            // While there are pending internal block requests...\n            while (this._internalBlockNumber) {\n\n                // ...\"remember\" which fetch we started with\n                const internalBlockNumber = this._internalBlockNumber;\n\n                try {\n                    // Check the result is not too stale\n                    const result = await internalBlockNumber;\n                    if ((getTime() - result.respTime) <= maxAge) {\n                        return result.blockNumber;\n                    }\n\n                    // Too old; fetch a new value\n                    break;\n\n                } catch(error) {\n\n                    // The fetch rejected; if we are the first to get the\n                    // rejection, drop through so we replace it with a new\n                    // fetch; all others blocked will then get that fetch\n                    // which won't match the one they \"remembered\" and loop\n                    if (this._internalBlockNumber === internalBlockNumber) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        const reqTime = getTime();\n\n        const checkInternalBlockNumber = resolveProperties({\n            blockNumber: this.perform(\"getBlockNumber\", { }),\n            networkError: this.getNetwork().then((network) => (null), (error) => (error))\n        }).then(({ blockNumber, networkError }) => {\n            if (networkError) {\n                // Unremember this bad internal block number\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n                throw networkError;\n            }\n\n            const respTime = getTime();\n\n            blockNumber = BigNumber.from(blockNumber).toNumber();\n            if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n            this._maxInternalBlockNumber = blockNumber;\n            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n            return { blockNumber, reqTime, respTime };\n        });\n\n        this._internalBlockNumber = checkInternalBlockNumber;\n\n        // Swallow unhandled exceptions; if needed they are handled else where\n        checkInternalBlockNumber.catch((error) => {\n            // Don't null the dead (rejected) fetch, if it has already been updated\n            if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n            }\n        });\n\n        return (await checkInternalBlockNumber).blockNumber;\n    }\n\n    async poll(): Promise<void> {\n        const pollId = nextPollId++;\n\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners: Array<Promise<void>> = [];\n\n        let blockNumber: number = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n\n        if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n            logger.warn(`network block skew detected; skipping block events (emitted=${ this._emitted.block } blockNumber${ blockNumber })`);\n            this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            }));\n            this.emit(\"block\", blockNumber);\n\n        } else {\n            // Notify all listener for each block that has passed\n            for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n        }\n\n        // The emitted block was updated, check for obsolete events\n        if ((<number>this._emitted.block) !== blockNumber) {\n            this._emitted.block = blockNumber;\n\n            Object.keys(this._emitted).forEach((key) => {\n                // The block event does not expire\n                if (key === \"block\") { return; }\n\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") { return; }\n\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event) => {\n            switch (event.type) {\n                case \"tx\": {\n                    const hash = event.hash;\n                    let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt || receipt.blockNumber == null) { return null; }\n                        this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        this.emit(hash, receipt);\n                        return null;\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                    runners.push(runner);\n\n                    break;\n                }\n\n                case \"filter\": {\n                    // We only allow a single getLogs to be in-flight at a time\n                    if (!event._inflight) {\n                        event._inflight = true;\n\n                        // This is the first filter for this event, so we want to\n                        // restrict events to events that happened no earlier than now\n                        if (event._lastBlockNumber === -2) {\n                            event._lastBlockNumber = blockNumber - 1;\n                        }\n\n                        // Filter from the last *known* event; due to load-balancing\n                        // and some nodes returning updated block numbers before\n                        // indexing events, a logs result with 0 entries cannot be\n                        // trusted and we must retry a range which includes it again\n                        const filter = event.filter;\n                        filter.fromBlock = event._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n\n                        // Prevent fitler ranges from growing too wild, since it is quite\n                        // likely there just haven't been any events to move the lastBlockNumber.\n                        const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                        if (minFromBlock > filter.fromBlock) { filter.fromBlock = minFromBlock; }\n\n                        if (filter.fromBlock < 0) { filter.fromBlock = 0; }\n\n                        const runner = this.getLogs(filter).then((logs) => {\n                            // Allow the next getLogs\n                            event._inflight = false;\n\n                            if (logs.length === 0) { return; }\n\n                            logs.forEach((log: Log) => {\n                                // Only when we get an event for a given block number\n                                // can we trust the events are indexed\n                                if (log.blockNumber > event._lastBlockNumber) {\n                                    event._lastBlockNumber = log.blockNumber;\n                                }\n\n                                // Make sure we stall requests to fetch blocks and txs\n                                this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n\n                                this.emit(filter, log);\n                            });\n                        }).catch((error: Error) => {\n                            this.emit(\"error\", error);\n\n                            // Allow another getLogs (the range was not updated)\n                            event._inflight = false;\n                        });\n                        runners.push(runner);\n                    }\n\n                    break;\n                }\n            }\n        });\n\n        this._lastBlockNumber = blockNumber;\n\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(() => {\n            this.emit(\"didPoll\", pollId);\n        }).catch((error) => { this.emit(\"error\", error); });\n\n        return;\n    }\n\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber: number): void {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) { this.poll(); }\n    }\n\n    get network(): Network {\n        return this._network;\n    }\n\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    async detectNetwork(): Promise<Network> {\n        return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"provider.detectNetwork\"\n        });\n    }\n\n    async getNetwork(): Promise<Network> {\n        const network = await this._ready();\n\n        // Make sure we are still connected to the same network; this is\n        // only an external call for backends which can have the underlying\n        // network change spontaneously\n        const currentNetwork = await this.detectNetwork();\n        if (network.chainId !== currentNetwork.chainId) {\n\n            // We are allowing network changes, things can get complex fast;\n            // make sure you know what you are doing if you use \"any\"\n            if (this.anyNetwork) {\n                this._network = currentNetwork;\n\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                await stall(0);\n\n                return this._network;\n            }\n\n            const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n            });\n\n            this.emit(\"error\", error);\n            throw error;\n        }\n\n        return network;\n    }\n\n    get blockNumber(): number {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n    }\n\n    get polling(): boolean {\n        return (this._poller != null);\n    }\n\n    set polling(value: boolean) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) { this.poll(); }\n\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n\n    get pollingInterval(): number {\n        return this._pollingInterval;\n    }\n\n    set pollingInterval(value: number) {\n        if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n\n        this._pollingInterval = value;\n\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n\n    _getFastBlockNumber(): Promise<number> {\n        const now = getTime();\n\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n\n        return this._fastBlockNumberPromise;\n    }\n\n    _setFastBlockNumber(blockNumber: number): void {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n\n    async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n        return this._waitForTransaction(transactionHash, (confirmations == null) ? 1: confirmations, timeout || 0, null);\n    }\n\n    async _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: { data: string, from: string, nonce: number, to: string, value: BigNumber, startBlock: number }): Promise<TransactionReceipt> {\n        const receipt = await this.getTransactionReceipt(transactionHash);\n\n        // Receipt is already good\n        if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n        // Poll until the receipt is good...\n        return new Promise((resolve, reject) => {\n            const cancelFuncs: Array<() => void> = [];\n\n            let done = false;\n            const alreadyDone = function() {\n                if (done) { return true; }\n                done = true;\n                cancelFuncs.forEach((func) => { func(); });\n                return false;\n            };\n\n            const minedHandler = (receipt: TransactionReceipt) => {\n                if (receipt.confirmations < confirmations) { return; }\n                if (alreadyDone()) { return; }\n                resolve(receipt);\n            }\n            this.on(transactionHash, minedHandler);\n            cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n\n            if (replaceable) {\n                let lastBlockNumber = replaceable.startBlock;\n                let scannedBlock: number = null;\n                const replaceHandler = async (blockNumber: number) => {\n                    if (done) { return; }\n\n                    // Wait 1 second; this is only used in the case of a fault, so\n                    // we will trade off a little bit of latency for more consistent\n                    // results and fewer JSON-RPC calls\n                    await stall(1000);\n\n                    this.getTransactionCount(replaceable.from).then(async (nonce) => {\n                        if (done) { return; }\n\n                        if (nonce <= replaceable.nonce) {\n                            lastBlockNumber = blockNumber;\n\n                        } else {\n                            // First check if the transaction was mined\n                            {\n                                const mined = await this.getTransaction(transactionHash);\n                                if (mined && mined.blockNumber != null) { return; }\n                            }\n\n                            // First time scanning. We start a little earlier for some\n                            // wiggle room here to handle the eventually consistent nature\n                            // of blockchain (e.g. the getTransactionCount was for a\n                            // different block)\n                            if (scannedBlock == null) {\n                                scannedBlock = lastBlockNumber - 3;\n                                if (scannedBlock < replaceable.startBlock) {\n                                    scannedBlock = replaceable.startBlock;\n                                }\n                            }\n\n                            while (scannedBlock <= blockNumber) {\n                                if (done) { return; }\n\n                                const block = await this.getBlockWithTransactions(scannedBlock);\n                                for (let ti = 0; ti < block.transactions.length; ti++) {\n                                    const tx = block.transactions[ti];\n\n                                    // Successfully mined!\n                                    if (tx.hash === transactionHash) { return; }\n\n                                    // Matches our transaction from and nonce; its a replacement\n                                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                        if (done) { return; }\n\n                                        // Get the receipt of the replacement\n                                        const receipt = await this.waitForTransaction(tx.hash, confirmations);\n\n                                        // Already resolved or rejected (prolly a timeout)\n                                        if (alreadyDone()) { return; }\n\n                                        // The reason we were replaced\n                                        let reason = \"replaced\";\n                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                            reason = \"repriced\";\n                                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                            reason = \"cancelled\"\n                                        }\n\n                                        // Explain why we were replaced\n                                        reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                            reason,\n                                            replacement: this._wrapTransaction(tx),\n                                            hash: transactionHash,\n                                            receipt\n                                        }));\n\n                                        return;\n                                    }\n                                }\n                                scannedBlock++;\n                            }\n                        }\n\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n\n                    }, (error) => {\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n                    });\n                };\n\n                if (done) { return; }\n                this.once(\"block\", replaceHandler);\n\n                cancelFuncs.push(() => {\n                    this.removeListener(\"block\", replaceHandler);\n                });\n            }\n\n            if (typeof(timeout) === \"number\" && timeout > 0) {\n                const timer = setTimeout(() => {\n                    if (alreadyDone()) { return; }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                }, timeout);\n                if (timer.unref) { timer.unref(); }\n\n                cancelFuncs.push(() => { clearTimeout(timer); });\n            }\n        });\n    }\n\n    async getBlockNumber(): Promise<number> {\n        return this._getInternalBlockNumber(0);\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        await this.getNetwork();\n\n        const result = await this.perform(\"getGasPrice\", { });\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result, error\n            });\n        }\n    }\n\n    async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getBalance\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params, result, error\n            });\n        }\n    }\n\n    async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getTransactionCount\", params);\n        try {\n            return BigNumber.from(result).toNumber();\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params, result, error\n            });\n        }\n    }\n\n    async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getCode\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params, result, error\n            });\n        }\n    }\n\n    async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag),\n            position: Promise.resolve(position).then((p) => hexValue(p))\n        });\n        const result = await this.perform(\"getStorageAt\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params, result, error\n            });\n        }\n    }\n\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse {\n        if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n        const result = <TransactionResponse>tx;\n\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n\n        result.wait = async (confirms?: number, timeout?: number) => {\n            if (confirms == null) { confirms = 1; }\n            if (timeout == null) { timeout = 0; }\n\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n\n            const receipt = await this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) { return null; }\n\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        };\n\n        return result;\n    }\n\n    async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n        const tx = this.formatter.transaction(signedTransaction);\n        if (tx.confirmations == null) { tx.confirmations = 0; }\n        const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        try {\n            const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n            return this._wrapTransaction(tx, hash, blockNumber);\n        } catch (error) {\n            (<any>error).transaction = tx;\n            (<any>error).transactionHash = tx.hash;\n            throw error;\n        }\n    }\n\n    async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n        const values: any = await transaction;\n\n        const tx: any = { };\n\n        [\"from\", \"to\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n        });\n\n        [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n        });\n\n        [\"type\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v: null));\n        });\n\n        if (values.accessList) {\n            tx.accessList = this.formatter.accessList(values.accessList);\n        }\n\n        [\"data\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n        });\n\n        return this.formatter.transactionRequest(await resolveProperties(tx));\n    }\n\n    async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n        filter = await filter;\n\n        const result: any = { };\n\n        if (filter.address != null) {\n            result.address = this._getAddress(filter.address);\n        }\n\n        [\"blockHash\", \"topics\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = (<any>filter)[key];\n        });\n\n        [\"fromBlock\", \"toBlock\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = this._getBlockTag((<any>filter)[key]);\n        });\n\n        return this.formatter.filter(await resolveProperties(result));\n    }\n\n    async _call(transaction: TransactionRequest, blockTag: BlockTag, attempt: number): Promise<string> {\n        if (attempt >= MAX_CCIP_REDIRECTS) {\n            logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                redirects: attempt, transaction\n            });\n        }\n\n        const txSender = transaction.to;\n\n        const result = await this.perform(\"call\", { transaction, blockTag });\n\n        // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n        if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n            try {\n                const data = hexDataSlice(result, 4);\n\n                // Check the sender of the OffchainLookup matches the transaction\n                const sender = hexDataSlice(data, 0, 32);\n                if (!BigNumber.from(sender).eq(txSender)) {\n                    logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                // Read the URLs from the response\n                const urls: Array<string> = [];\n                const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                const urlsData = hexDataSlice(data, urlsOffset + 32);\n                for (let u = 0; u < urlsLength; u++) {\n                    const url = _parseString(urlsData, u * 32);\n                    if (url == null) {\n                        logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    urls.push(url);\n                }\n\n                // Get the CCIP calldata to forward\n                const calldata = _parseBytes(data, 64);\n\n                // Get the callbackSelector (bytes4)\n                if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                    logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n                const callbackSelector = hexDataSlice(data, 96, 100);\n\n                // Get the extra data to send back to the contract as context\n                const extraData = _parseBytes(data, 128);\n\n                const ccipResult = await this.ccipReadFetch(<Transaction>transaction, calldata, urls);\n                if (ccipResult == null) {\n                    logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                const tx = {\n                    to: txSender,\n                    data: hexConcat([ callbackSelector, encodeBytes([ ccipResult, extraData ]) ])\n                };\n\n                return this._call(tx, blockTag, attempt + 1);\n\n            } catch (error) {\n                if (error.code === Logger.errors.SERVER_ERROR) { throw error; }\n            }\n        }\n\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params: { transaction, blockTag }, result, error\n            });\n        }\n\n    }\n\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const resolved = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction),\n            blockTag: this._getBlockTag(blockTag),\n            ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n        });\n        return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0: -1);\n    }\n\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params, result, error\n            });\n        }\n    }\n\n    async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n        addressOrName = await addressOrName;\n        if (typeof(addressOrName) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n        }\n\n        const address = await this.resolveName(addressOrName);\n        if (address == null) {\n            logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${ JSON.stringify(addressOrName) })`\n            });\n        }\n        return address;\n    }\n\n    async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions> {\n        await this.getNetwork();\n\n        blockHashOrBlockTag = await blockHashOrBlockTag;\n\n        // If blockTag is a number (not \"latest\", etc), this is the block number\n        let blockNumber = -128;\n\n        const params: { [key: string]: any } = {\n            includeTransactions: !!includeTransactions\n        };\n\n        if (isHexString(blockHashOrBlockTag, 32)) {\n            params.blockHash = blockHashOrBlockTag;\n        } else {\n            try {\n                params.blockTag = await this._getBlockTag(blockHashOrBlockTag);\n                if (isHexString(params.blockTag)) {\n                    blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n            } catch (error) {\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            }\n        }\n\n        return poll(async () => {\n            const block = await this.perform(\"getBlock\", params);\n\n            // Block was not found\n            if (block == null) {\n\n                // For blockhashes, if we didn't say it existed, that blockhash may\n                // not exist. If we did see it though, perhaps from a log, we know\n                // it exists, and this node is just not caught up yet.\n                if (params.blockHash != null) {\n                    if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n                }\n\n                // For block tags, if we are asking for a future block, we return null\n                if (params.blockTag != null) {\n                    if (blockNumber > this._emitted.block) { return null; }\n                }\n\n                // Retry on the next block\n                return undefined;\n            }\n\n            // Add transactions\n            if (includeTransactions) {\n                let blockNumber: number = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                    const tx = block.transactions[i];\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n\n                    } else if (tx.confirmations == null) {\n                        if (blockNumber == null) {\n                            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        }\n\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = (blockNumber - tx.blockNumber) + 1;\n                        if (confirmations <= 0) { confirmations = 1; }\n                        tx.confirmations = confirmations;\n                    }\n                }\n\n                const blockWithTxs: any = this.formatter.blockWithTransactions(block);\n                blockWithTxs.transactions = blockWithTxs.transactions.map((tx: TransactionResponse) => this._wrapTransaction(tx));\n                return blockWithTxs;\n            }\n\n            return this.formatter.block(block);\n\n        }, { oncePoll: this });\n    }\n\n    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\n        return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false));\n    }\n\n    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\n        return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true));\n    }\n\n    async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransaction\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            const tx = this.formatter.transactionResponse(result);\n\n            if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n\n            } else if (tx.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - tx.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                tx.confirmations = confirmations;\n            }\n\n            return this._wrapTransaction(tx);\n        }, { oncePoll: this });\n    }\n\n    async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n        await this.getNetwork();\n\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransactionReceipt\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            // \"geth-etc\" returns receipts before they are ready\n            if (result.blockHash == null) { return undefined; }\n\n            const receipt = this.formatter.receipt(result);\n\n            if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n\n            } else if (receipt.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                receipt.confirmations = confirmations;\n            }\n\n            return receipt;\n        }, { oncePoll: this });\n    }\n\n    async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n        await this.getNetwork();\n        const params = await resolveProperties({ filter: this._getFilter(filter) });\n        const logs: Array<Log> = await this.perform(\"getLogs\", params);\n        logs.forEach((log) => {\n            if (log.removed == null) { log.removed = false; }\n        });\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n\n    async getEtherPrice(): Promise<number> {\n        await this.getNetwork();\n        return this.perform(\"getEtherPrice\", { });\n    }\n\n    async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n        blockTag = await blockTag;\n\n        if (typeof(blockTag) === \"number\" && blockTag < 0) {\n            if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n            }\n\n            let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            blockNumber += blockTag;\n            if (blockNumber < 0) { blockNumber = 0; }\n            return this.formatter.blockTag(blockNumber)\n        }\n\n        return this.formatter.blockTag(blockTag);\n    }\n\n\n    async getResolver(name: string): Promise<null | Resolver> {\n        let currentName = name;\n        while (true) {\n            if (currentName === \"\" || currentName === \".\") { return null; }\n\n            // Optimization since the eth node cannot change and does\n            // not have a wildcard resolver\n            if (name !== \"eth\" && currentName === \"eth\") { return null; }\n\n            // Check the current node for a resolver\n            const addr = await this._getResolver(currentName, \"getResolver\");\n\n            // Found a resolver!\n            if (addr != null) {\n                const resolver = new Resolver(this, addr, name);\n\n                // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                if (currentName !== name && !(await resolver.supportsWildcard())) { return null; }\n\n                return resolver;\n            }\n\n            // Get the parent node\n            currentName = currentName.split(\".\").slice(1).join(\".\");\n        }\n\n    }\n\n    async _getResolver(name: string, operation?: string): Promise<string> {\n        if (operation == null) { operation = \"ENS\"; }\n\n        const network = await this.getNetwork();\n\n        // No ENS...\n        if (!network.ensAddress) {\n            logger.throwError(\n                \"network does not support ENS\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { operation, network: network.name }\n            );\n        }\n\n        try {\n            // keccak256(\"resolver(bytes32)\")\n            const addrData = await this.call({\n                to: network.ensAddress,\n                data: (\"0x0178b8bf\" + namehash(name).substring(2))\n            });\n            return this.formatter.callAddress(addrData);\n        } catch (error) {\n            // ENS registry cannot throw errors on resolver(bytes32)\n        }\n\n        return null;\n    }\n\n    async resolveName(name: string | Promise<string>): Promise<null | string> {\n        name = await name;\n\n        // If it is already an address, nothing to resolve\n        try {\n            return Promise.resolve(this.formatter.address(name));\n        } catch (error) {\n            // If is is a hexstring, the address is bad (See #694)\n            if (isHexString(name)) { throw error; }\n        }\n\n        if (typeof(name) !== \"string\") {\n            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n        }\n\n        // Get the addr from the resolver\n        const resolver = await this.getResolver(name);\n        if (!resolver) { return null; }\n\n        return await resolver.getAddress();\n    }\n\n    async lookupAddress(address: string | Promise<string>): Promise<null | string> {\n        address = await address;\n        address = this.formatter.address(address);\n\n        const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n        const resolverAddr = await this._getResolver(node, \"lookupAddress\");\n        if (resolverAddr == null) { return null; }\n\n        // keccak(\"name(bytes32)\")\n        const name = _parseString(await this.call({\n            to: resolverAddr,\n            data: (\"0x691f3431\" + namehash(node).substring(2))\n        }), 0);\n\n        const addr = await this.resolveName(name);\n        if (addr != address) { return null; }\n\n        return name;\n    }\n\n    async getAvatar(nameOrAddress: string): Promise<null | string> {\n        let resolver: Resolver = null;\n        if (isHexString(nameOrAddress)) {\n            // Address; reverse lookup\n            const address = this.formatter.address(nameOrAddress);\n\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n            const resolverAddress = await this._getResolver(node, \"getAvatar\");\n            if (!resolverAddress) { return null; }\n\n            // Try resolving the avatar against the addr.reverse resolver\n            resolver = new Resolver(this, resolverAddress, node);\n            try {\n                const avatar = await resolver.getAvatar();\n                if (avatar) { return avatar.url; }\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n            }\n\n            // Try getting the name and performing forward lookup; allowing wildcards\n            try {\n                // keccak(\"name(bytes32)\")\n                const name = _parseString(await this.call({\n                    to: resolverAddress,\n                    data: (\"0x691f3431\" + namehash(node).substring(2))\n                }), 0);\n                resolver = await this.getResolver(name);\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n                return null;\n            }\n\n        } else {\n            // ENS name; forward lookup with wildcard\n            resolver = await this.getResolver(nameOrAddress);\n            if (!resolver) { return null; }\n        }\n\n        const avatar = await resolver.getAvatar();\n        if (avatar == null) { return null; }\n\n        return avatar.url;\n    }\n\n    perform(method: string, params: any): Promise<any> {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n\n    _startEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _stopEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n        const event = new Event(getEventTag(eventName), listener, once)\n        this._events.push(event);\n        this._startEvent(event);\n\n        return this;\n    }\n\n    on(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, false);\n    }\n\n    once(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, true);\n    }\n\n\n    emit(eventName: EventType, ...args: Array<any>): boolean {\n        let result = false;\n\n        let stopped: Array<Event> = [ ];\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) { return true; }\n\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n\n            result = true;\n\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n\n            return true;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventType): number {\n        if (!eventName) { return this._events.length; }\n\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n\n    listeners(eventName?: EventType): Array<Listener> {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n\n    off(eventName: EventType, listener?: Listener): this {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n\n        const stopped: Array<Event> = [ ];\n\n        let found = false;\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) { return true; }\n            if (found) { return true; }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n\n    removeAllListeners(eventName?: EventType): this {\n        let stopped: Array<Event> = [ ];\n        if (eventName == null) {\n            stopped = this._events;\n\n            this._events = [ ];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) { return true; }\n                stopped.push(event);\n                return false;\n            });\n        }\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n}\n","export const HashZero = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\n","\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nimport { Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Bytes, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { checkProperties, deepCopy, Deferrable, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AccessList, accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson, poll } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider, Event } from \"./base-provider\";\n\n\nconst errorGas = [ \"call\", \"estimateGas\" ];\n\nfunction spelunk(value: any, requireData: boolean): null | { message: string, data: null | string } {\n    if (value == null) { return null; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\" && value.message.match(\"reverted\")) {\n        const data = isHexString(value.data) ? value.data: null;\n        if (!requireData || data) {\n            return { message: value.message, data };\n        }\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            const result = spelunk(value[key], requireData);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        } catch (error) { }\n    }\n\n    return null;\n}\n\nfunction checkError(method: string, error: any, params: any): any {\n\n    const transaction = params.transaction || params.signedTransaction;\n\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error, true);\n        if (result) { return result.data; }\n\n        // Nothing descriptive..\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\", transaction, error\n        });\n    }\n\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        let result = spelunk(error.body, false);\n        if (result == null) { result = spelunk(error, false); }\n\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message, method, transaction, error\n            });\n        }\n    }\n\n    // @TODO: Should we spelunk for message too?\n\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof(error.error.message) === \"string\") {\n        message = error.error.message;\n    } else if (typeof(error.body) === \"string\") {\n        message = error.body;\n    } else if (typeof(error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nfunction timer(timeout: number): Promise<any> {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\n\nfunction getResult(payload: { error?: { code?: number, data?: any, message?: string }, result?: any }): any {\n    if (payload.error) {\n        // @TODO: not any\n        const error: any = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n\n    return payload.result;\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\nconst _constructorGuard = {};\n\nexport class JsonRpcSigner extends Signer implements TypedDataSigner {\n    readonly provider: JsonRpcProvider;\n    _index: number;\n    _address: string;\n\n    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number) {\n        super();\n\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        defineReadOnly(this, \"provider\", provider);\n\n        if (addressOrIndex == null) { addressOrIndex = 0; }\n\n        if (typeof(addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n\n        } else if (typeof(addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n\n    connect(provider: Provider): JsonRpcSigner {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n\n    connectUnchecked(): JsonRpcSigner {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n\n    getAddress(): Promise<string> {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index])\n        });\n    }\n\n    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        transaction = shallowCopy(transaction);\n\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) { address = address.toLowerCase(); }\n            return address;\n        });\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n        }\n\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n\n            const hexTx = (<any>this.provider.constructor).hexlifyTransaction(tx, { from: true });\n\n            return this.provider.send(\"eth_sendTransaction\", [ hexTx ]).then((hash) => {\n                return hash;\n            }, (error) => {\n                if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n                        action: \"sendTransaction\",\n                        transaction: tx\n                    });\n                }\n\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(transaction);\n\n        try {\n            // Unfortunately, JSON-RPC only provides and opaque transaction hash\n            // for a response, and we need the actual transaction, so we poll\n            // for it; it should show up very quickly\n            return await poll(async () => {\n                const tx = await this.provider.getTransaction(hash);\n                if (tx === null) { return undefined; }\n                return this.provider._wrapTransaction(tx, hash, blockNumber);\n            }, { oncePoll: this.provider });\n        } catch (error) {\n            (<any>error).transactionHash = hash;\n            throw error;\n        }\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n        try {\n            return await this.provider.send(\"personal_sign\", [ hexlify(data), address.toLowerCase() ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"signMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _legacySignMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        try {\n            // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n            return await this.provider.send(\"eth_sign\", [ address.toLowerCase(), hexlify(data) ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_legacySignMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names (in-place)\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            return this.provider.resolveName(name);\n        });\n\n        const address = await this.getAddress();\n\n        try {\n            return await this.provider.send(\"eth_signTypedData_v4\", [\n                address.toLowerCase(),\n                JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n            ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_signTypedData\",\n                    from: address,\n                    messageData: { domain: populated.domain, types, value: populated.value }\n                });\n            }\n            throw error;\n        }\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        const provider = this.provider;\n\n        const address = await this.getAddress();\n\n        return provider.send(\"personal_unlockAccount\", [ address.toLowerCase(), password, null ]);\n    }\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return <TransactionResponse>{\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations?: number) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n}\n\nexport class JsonRpcProvider extends BaseProvider {\n    readonly connection: ConnectionInfo;\n\n    _pendingFilter: Promise<number>;\n    _nextId: number;\n\n    // During any given event loop, the results for a given call will\n    // all be the same, so we can dedup the calls to save requests and\n    // bandwidth. @TODO: Try out generalizing this against send?\n    _eventLoopCache: Record<string, Promise<any>>;\n    get _cache(): Record<string, Promise<any>> {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = { };\n        }\n        return this._eventLoopCache;\n    }\n\n    constructor(url?: ConnectionInfo | string, network?: Networkish) {\n        let networkOrReady: Networkish | Promise<Network> = network;\n\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Default URL\n        if (!url) { url = getStatic<() => string>(this.constructor, \"defaultUrl\")(); }\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"connection\",Object.freeze({\n                url: url\n            }));\n        } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n\n        this._nextId = 42;\n    }\n\n    static defaultUrl(): string {\n        return \"http:/\\/localhost:8545\";\n    }\n\n    detectNetwork(): Promise<Network> {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n\n    async _uncachedDetectNetwork(): Promise<Network> {\n        await timer(0);\n\n        let chainId = null;\n        try {\n            chainId = await this.send(\"eth_chainId\", [ ]);\n        } catch (error) {\n            try {\n                chainId = await this.send(\"net_version\", [ ]);\n            } catch (error) { }\n        }\n\n        if (chainId != null) {\n            const getNetwork = getStatic<(network: Networkish) => Network>(this.constructor, \"getNetwork\");\n            try {\n                return getNetwork(BigNumber.from(chainId).toNumber());\n            } catch (error) {\n                return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                    chainId: chainId,\n                    event: \"invalidNetwork\",\n                    serverError: error\n                });\n            }\n        }\n\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            event: \"noNetwork\"\n        });\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n\n    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return this.send(\"eth_accounts\", []).then((accounts: Array<string>) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([ \"eth_chainId\", \"eth_blockNumber\" ].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n\n            return result;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n\n            throw error;\n        });\n\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n\n        return result;\n    }\n\n    prepareRequest(method: string, params: any): [ string, Array<any> ] {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [ \"eth_blockNumber\", [] ];\n\n            case \"getGasPrice\":\n                return [ \"eth_gasPrice\", [] ];\n\n            case \"getBalance\":\n                return [ \"eth_getBalance\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getTransactionCount\":\n                return [ \"eth_getTransactionCount\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getCode\":\n                return [ \"eth_getCode\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getStorageAt\":\n                return [ \"eth_getStorageAt\", [ getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag ] ];\n\n            case \"sendTransaction\":\n                return [ \"eth_sendRawTransaction\", [ params.signedTransaction ] ]\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [ \"eth_getBlockByNumber\", [ params.blockTag, !!params.includeTransactions ] ];\n                } else if (params.blockHash) {\n                    return [ \"eth_getBlockByHash\", [ params.blockHash, !!params.includeTransactions ] ];\n                }\n                return null;\n\n            case \"getTransaction\":\n                return [ \"eth_getTransactionByHash\", [ params.transactionHash ] ];\n\n            case \"getTransactionReceipt\":\n                return [ \"eth_getTransactionReceipt\", [ params.transactionHash ] ];\n\n            case \"call\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_call\", [ hexlifyTransaction(params.transaction, { from: true }), params.blockTag ] ];\n            }\n\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_estimateGas\", [ hexlifyTransaction(params.transaction, { from: true }) ] ];\n            }\n\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [ \"eth_getLogs\", [ params.filter ] ];\n\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (method === \"call\" || method === \"estimateGas\") {\n            const tx = params.transaction;\n            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                // If there are no EIP-1559 properties, it might be non-EIP-1559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        params = shallowCopy(params);\n                        params.transaction = shallowCopy(tx);\n                        delete params.transaction.type;\n                    }\n                }\n            }\n        }\n\n        const args = this.prepareRequest(method,  params);\n\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        try {\n            return await this.send(args[0], args[1])\n        } catch (error) {\n            return checkError(method, error, params);\n        }\n    }\n\n    _startEvent(event: Event): void {\n        if (event.tag === \"pending\") { this._startPending(); }\n        super._startEvent(event);\n    }\n\n    _startPending(): void {\n        if (this._pendingFilter != null) { return; }\n        const self = this;\n\n        const pendingFilter: Promise<number> = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [ filterId ]).then(function(hashes: Array<string>) {\n                    if (self._pendingFilter != pendingFilter) { return null; }\n\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [ filterId ]);\n                        return;\n                    }\n                    setTimeout(function() { poll(); }, 0);\n\n                    return null;\n                }).catch((error: Error) => { });\n            }\n            poll();\n\n            return filterId;\n        }).catch((error: Error) => { });\n    }\n\n    _stopEvent(event: Event): void {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: { [key: string]: boolean }): { [key: string]: string | AccessList } {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) { allowed[key] = true; }\n            }\n        }\n\n        checkProperties(transaction, allowed);\n\n        const result: { [key: string]: string | AccessList } = {};\n\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            const value = hexValue(BigNumber.from((<any>transaction)[key]));\n            if (key === \"gasLimit\") { key = \"gas\"; }\n            result[key] = value;\n        });\n\n        [\"from\", \"to\", \"data\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            result[key] = hexlify((<any>transaction)[key]);\n        });\n\n        if ((<any>transaction).accessList) {\n            result[\"accessList\"] = accessListify((<any>transaction).accessList);\n        }\n\n        return result;\n    }\n}\n","\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport type { GetUrlResponse, Options } from \"./types\";\n\nexport { GetUrlResponse, Options };\n\nexport async function getUrl(href: string, options?: Options): Promise<GetUrlResponse> {\n    if (options == null) { options = { }; }\n\n    const request: RequestInit = {\n        method: (options.method || \"GET\"),\n        headers: (options.headers || { }),\n        body: (options.body || undefined),\n    };\n\n    if (options.skipFetchSetup !== true) {\n        request.mode = <RequestMode>\"cors\";              // no-cors, cors, *same-origin\n        request.cache = <RequestCache>\"no-cache\";        // *default, no-cache, reload, force-cache, only-if-cached\n        request.credentials = <RequestCredentials>\"same-origin\";  // include, *same-origin, omit\n        request.redirect = <RequestRedirect>\"follow\";    // manual, *follow, error\n        request.referrer = \"client\";                     // no-referrer, *client\n    };\n\n    if (options.fetchOptions != null) {\n        const opts = options.fetchOptions;\n        if (opts.mode) { request.mode = <RequestMode>(opts.mode); }\n        if (opts.cache) { request.cache = <RequestCache>(opts.cache); }\n        if (opts.credentials) { request.credentials = <RequestCredentials>(opts.credentials); }\n        if (opts.redirect) { request.redirect = <RequestRedirect>(opts.redirect); }\n        if (opts.referrer) { request.referrer = opts.referrer; }\n    }\n\n    const response = await fetch(href, request);\n    const body = await response.arrayBuffer();\n\n    const headers: { [ name: string ]: string } = { };\n    if (response.headers.forEach) {\n        response.headers.forEach((value, key) => {\n            headers[key.toLowerCase()] = value;\n        });\n    } else {\n        (<() => Array<string>>((<any>(response.headers)).keys))().forEach((key) => {\n            headers[key.toLowerCase()] = response.headers.get(key);\n        });\n    }\n\n    return {\n        headers: headers,\n        statusCode: response.status,\n        statusMessage: response.statusText,\n        body: arrayify(new Uint8Array(body)),\n    }\n}\n","\"use strict\";\n\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { getUrl, GetUrlResponse, Options } from \"./geturl\";\n\nfunction staller(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\nfunction bodyify(value: any, type: string): string {\n    if (value == null) { return null; }\n\n    if (typeof(value) === \"string\") { return value; }\n\n    if (isBytesLike(value)) {\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n            try {\n                return toUtf8String(value);\n            } catch (error) { };\n        }\n        return hexlify(value);\n    }\n\n    return value;\n}\n\n// Exported Types\nexport type ConnectionInfo = {\n    url: string,\n    headers?: { [key: string]: string | number }\n\n    user?: string,\n    password?: string,\n\n    allowInsecureAuthentication?: boolean,\n    allowGzip?: boolean,\n\n    throttleLimit?: number,\n    throttleSlotInterval?: number;\n    throttleCallback?: (attempt: number, url: string) => Promise<boolean>,\n\n    skipFetchSetup?: boolean;\n    fetchOptions?: Record<string, string>;\n    errorPassThrough?: boolean;\n\n    timeout?: number,\n};\n\nexport interface OnceBlockable {\n    once(eventName: \"block\", handler: () => void): void;\n}\n\nexport interface OncePollable {\n    once(eventName: \"poll\", handler: () => void): void;\n}\n\nexport type PollOptions = {\n    timeout?: number,\n    floor?: number,\n    ceiling?: number,\n    interval?: number,\n    retryLimit?: number,\n    onceBlock?: OnceBlockable\n    oncePoll?: OncePollable\n};\n\nexport type FetchJsonResponse = {\n    statusCode: number;\n    headers: { [ header: string ]: string };\n};\n\n\ntype Header = { key: string, value: string };\n\nfunction unpercent(value: string): Uint8Array {\n    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\n\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData<T = Uint8Array>(connection: string | ConnectionInfo, body?: Uint8Array, processFunc?: (value: Uint8Array, response: FetchJsonResponse) => T): Promise<T> {\n\n    // How many times to retry in the event of a throttle\n    const attemptLimit = (typeof(connection) === \"object\" && connection.throttleLimit != null) ? connection.throttleLimit: 12;\n    logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0),\n        \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n\n    const throttleCallback = ((typeof(connection) === \"object\") ? connection.throttleCallback: null);\n    const throttleSlotInterval = ((typeof(connection) === \"object\" && typeof(connection.throttleSlotInterval) === \"number\") ? connection.throttleSlotInterval: 100);\n    logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0),\n        \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n\n    const errorPassThrough = ((typeof(connection) === \"object\") ? !!(connection.errorPassThrough): false);\n\n    const headers: { [key: string]: Header } = { };\n\n    let url: string = null;\n\n    // @TODO: Allow ConnectionInfo to override some of these values\n    const options: Options = {\n        method: \"GET\",\n    };\n\n    let allow304 = false;\n\n    let timeout = 2 * 60 * 1000;\n\n    if (typeof(connection) === \"string\") {\n        url = connection;\n\n    } else if (typeof(connection) === \"object\") {\n        if (connection == null || connection.url == null) {\n            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n\n        url = connection.url;\n\n        if (typeof(connection.timeout) === \"number\" && connection.timeout > 0) {\n            timeout = connection.timeout;\n        }\n\n        if (connection.headers) {\n            for (const key in connection.headers) {\n                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };\n                if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n                    allow304 = true;\n                }\n            }\n        }\n\n        options.allowGzip = !!connection.allowGzip;\n\n        if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n                logger.throwError(\n                    \"basic authentication requires a secure https url\",\n                    Logger.errors.INVALID_ARGUMENT,\n                    { argument: \"url\", url: url, user: connection.user, password: \"[REDACTED]\" }\n                );\n            }\n\n            const authorization = connection.user + \":\" + connection.password;\n            headers[\"authorization\"] = {\n                key: \"Authorization\",\n                value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n            };\n        }\n\n        if (connection.skipFetchSetup != null) {\n            options.skipFetchSetup = !!connection.skipFetchSetup;\n        }\n\n        if (connection.fetchOptions != null) {\n            options.fetchOptions = shallowCopy(connection.fetchOptions);\n        }\n    }\n\n    const reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n    const dataMatch = ((url) ? url.match(reData): null);\n    if (dataMatch) {\n        try {\n            const response = {\n                statusCode: 200,\n                statusMessage: \"OK\",\n                headers: { \"content-type\": (dataMatch[1] || \"text/plain\")},\n                body: (dataMatch[2] ? base64Decode(dataMatch[3]): unpercent(dataMatch[3]))\n            };\n\n            let result: T = <T><unknown>response.body;\n            if (processFunc) {\n                result = processFunc(response.body, response);\n            }\n            return Promise.resolve(<T><unknown>result);\n\n        } catch (error) {\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(dataMatch[1], dataMatch[2]),\n                error: error,\n                requestBody: null,\n                requestMethod: \"GET\",\n                url: url\n            });\n        }\n    }\n\n    if (body) {\n        options.method = \"POST\";\n        options.body = body;\n        if (headers[\"content-type\"] == null) {\n            headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\n        }\n        if (headers[\"content-length\"] == null) {\n            headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\n        }\n    }\n\n    const flatHeaders: { [ key: string ]: string } = { };\n    Object.keys(headers).forEach((key) => {\n        const header = headers[key];\n        flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n\n    const runningTimeout = (function() {\n        let timer: NodeJS.Timer = null;\n        const promise: Promise<never> = new Promise(function(resolve, reject) {\n            if (timeout) {\n                timer = setTimeout(() => {\n                    if (timer == null) { return; }\n                    timer = null;\n\n                    reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        timeout: timeout,\n                        url: url\n                    }));\n                }, timeout);\n            }\n        });\n\n        const cancel = function() {\n            if (timer == null) { return; }\n            clearTimeout(timer);\n            timer = null;\n        }\n\n        return { promise, cancel };\n    })();\n\n    const runningFetch = (async function() {\n\n        for (let attempt = 0; attempt < attemptLimit; attempt++) {\n            let response: GetUrlResponse = null;\n\n            try {\n                response = await getUrl(url, options);\n\n                if (attempt < attemptLimit) {\n                    if (response.statusCode === 301 || response.statusCode === 302) {\n                        // Redirection; for now we only support absolute locataions\n                        const location = response.headers.location || \"\";\n                        if (options.method === \"GET\" && location.match(/^https:/)) {\n                            url = response.headers.location;\n                            continue;\n                        }\n\n                    } else if (response.statusCode === 429) {\n                        // Exponential back-off throttling\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            let stall = 0;\n\n                            const retryAfter = response.headers[\"retry-after\"];\n                            if (typeof(retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                                stall = parseInt(retryAfter) * 1000;\n                            } else {\n                                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            }\n\n                            //console.log(\"Stalling 429\");\n                            await staller(stall);\n                            continue;\n                        }\n                    }\n                }\n\n            } catch (error) {\n                response = (<any>error).response;\n                if (response == null) {\n                    runningTimeout.cancel();\n                    logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        serverError: error,\n                        url: url\n                    });\n                }\n            }\n\n\n            let body = response.body;\n\n            if (allow304 && response.statusCode === 304) {\n                body = null;\n            } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n                runningTimeout.cancel();\n                logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                    status: response.statusCode,\n                    headers: response.headers,\n                    body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                    requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                    requestMethod: options.method,\n                    url: url\n                });\n            }\n\n            if (processFunc) {\n                try {\n                    const result = await processFunc(body, response);\n                    runningTimeout.cancel();\n                    return result;\n\n                } catch (error) {\n                    // Allow the processFunc to trigger a throttle\n                    if (error.throttleRetry && attempt < attemptLimit) {\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            //console.log(\"Stalling callback\");\n                            await staller(timeout);\n                            continue;\n                        }\n                    }\n\n                    runningTimeout.cancel();\n                    logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                        body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                        error: error,\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        url: url\n                    });\n                }\n            }\n\n            runningTimeout.cancel();\n\n            // If we had a processFunc, it either returned a T or threw above.\n            // The \"body\" is now a Uint8Array.\n            return <T>(<unknown>body);\n        }\n\n        return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            url: url\n        });\n    })();\n\n    return Promise.race([ runningTimeout.promise, runningFetch ]);\n}\n\nexport function fetchJson(connection: string | ConnectionInfo, json?: string, processFunc?: (value: any, response: FetchJsonResponse) => any): Promise<any> {\n    let processJsonFunc = (value: Uint8Array, response: FetchJsonResponse) => {\n        let result: any = null;\n        if (value != null) {\n            try {\n                result = JSON.parse(toUtf8String(value));\n            } catch (error) {\n                logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n                    body: value,\n                    error: error\n                });\n            }\n        }\n\n        if (processFunc) {\n            result = processFunc(result, response);\n        }\n\n        return result;\n    }\n\n    // If we have json to send, we must\n    // - add content-type of application/json (unless already overridden)\n    // - convert the json to bytes\n    let body: Uint8Array = null;\n    if (json != null) {\n        body = toUtf8Bytes(json);\n\n        // Create a connection with the content-type set for JSON\n        const updated: ConnectionInfo = (typeof(connection) === \"string\") ? ({ url: connection }): shallowCopy(connection);\n        if (updated.headers) {\n            const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === \"content-type\")).length) !== 0;\n            if (!hasContentType) {\n                updated.headers = shallowCopy(updated.headers);\n                updated.headers[\"content-type\"] = \"application/json\";\n            }\n        } else {\n            updated.headers = { \"content-type\": \"application/json\" };\n        }\n        connection = updated;\n    }\n\n    return _fetchData<any>(connection, body, processJsonFunc);\n}\n\nexport function poll<T>(func: () => Promise<T>, options?: PollOptions): Promise<T> {\n    if (!options) { options = {}; }\n    options = shallowCopy(options);\n    if (options.floor == null) { options.floor = 0; }\n    if (options.ceiling == null) { options.ceiling = 10000; }\n    if (options.interval == null) { options.interval = 250; }\n\n    return new Promise(function(resolve, reject) {\n\n        let timer: NodeJS.Timer = null;\n        let done: boolean = false;\n\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n        const cancel = (): boolean => {\n            if (done) { return false; }\n            done = true;\n            if (timer) { clearTimeout(timer); }\n            return true;\n        };\n\n        if (options.timeout) {\n            timer = setTimeout(() => {\n                if (cancel()) { reject(new Error(\"timeout\")); }\n            }, options.timeout)\n        }\n\n        const retryLimit = options.retryLimit;\n\n        let attempt = 0;\n        function check() {\n            return func().then(function(result) {\n\n                // If we have a result, or are allowed null then we're done\n                if (result !== undefined) {\n                    if (cancel()) { resolve(result); }\n\n                } else if (options.oncePoll) {\n                    options.oncePoll.once(\"poll\", check);\n\n                } else if (options.onceBlock) {\n                    options.onceBlock.once(\"block\", check);\n\n                // Otherwise, exponential back-off (up to 10s) our next request\n                } else if (!done) {\n                    attempt++;\n                    if (attempt > retryLimit) {\n                        if (cancel()) { reject(new Error(\"retry limit reached\")); }\n                        return;\n                    }\n\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                    if (timeout < options.floor) { timeout = options.floor; }\n                    if (timeout > options.ceiling) { timeout = options.ceiling; }\n\n                    setTimeout(check, timeout);\n                }\n\n                return null;\n            }, function(error) {\n                if (cancel()) { reject(error); }\n            });\n        }\n        check();\n    });\n}\n\n","export const version = \"web/5.7.1\";\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n    ///////////////////\n    // Interaction Errors\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.7.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"properties/5.7.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function defineReadOnly(object, name, value) {\n    Object.defineProperty(object, name, {\n        enumerable: true,\n        value: value,\n        writable: false,\n    });\n}\n// Crawl up the constructor chain to find a static method\nexport function getStatic(ctor, key) {\n    for (let i = 0; i < 32; i++) {\n        if (ctor[key]) {\n            return ctor[key];\n        }\n        if (!ctor.prototype || typeof (ctor.prototype) !== \"object\") {\n            break;\n        }\n        ctor = Object.getPrototypeOf(ctor.prototype).constructor;\n    }\n    return null;\n}\nexport function resolveProperties(object) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const promises = Object.keys(object).map((key) => {\n            const value = object[key];\n            return Promise.resolve(value).then((v) => ({ key: key, value: v }));\n        });\n        const results = yield Promise.all(promises);\n        return results.reduce((accum, result) => {\n            accum[(result.key)] = result.value;\n            return accum;\n        }, {});\n    });\n}\nexport function checkProperties(object, properties) {\n    if (!object || typeof (object) !== \"object\") {\n        logger.throwArgumentError(\"invalid object\", \"object\", object);\n    }\n    Object.keys(object).forEach((key) => {\n        if (!properties[key]) {\n            logger.throwArgumentError(\"invalid object key - \" + key, \"transaction:\" + key, object);\n        }\n    });\n}\nexport function shallowCopy(object) {\n    const result = {};\n    for (const key in object) {\n        result[key] = object[key];\n    }\n    return result;\n}\nconst opaque = { bigint: true, boolean: true, \"function\": true, number: true, string: true };\nfunction _isFrozen(object) {\n    // Opaque objects are not mutable, so safe to copy by assignment\n    if (object === undefined || object === null || opaque[typeof (object)]) {\n        return true;\n    }\n    if (Array.isArray(object) || typeof (object) === \"object\") {\n        if (!Object.isFrozen(object)) {\n            return false;\n        }\n        const keys = Object.keys(object);\n        for (let i = 0; i < keys.length; i++) {\n            let value = null;\n            try {\n                value = object[keys[i]];\n            }\n            catch (error) {\n                // If accessing a value triggers an error, it is a getter\n                // designed to do so (e.g. Result) and is therefore \"frozen\"\n                continue;\n            }\n            if (!_isFrozen(value)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, \"object\", object);\n}\n// Returns a new copy of object, such that no properties may be replaced.\n// New properties may be added only to objects.\nfunction _deepCopy(object) {\n    if (_isFrozen(object)) {\n        return object;\n    }\n    // Arrays are mutable, so we need to create a copy\n    if (Array.isArray(object)) {\n        return Object.freeze(object.map((item) => deepCopy(item)));\n    }\n    if (typeof (object) === \"object\") {\n        const result = {};\n        for (const key in object) {\n            const value = object[key];\n            if (value === undefined) {\n                continue;\n            }\n            defineReadOnly(result, key, deepCopy(value));\n        }\n        return result;\n    }\n    return logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, \"object\", object);\n}\nexport function deepCopy(object) {\n    return _deepCopy(object);\n}\nexport class Description {\n    constructor(info) {\n        for (const key in info) {\n            this[key] = deepCopy(info[key]);\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","import { JsonRpcRequest, JsonRpcResponse } from './internal-types';\n\n/** Maximum size of a batch on the rpc provider. */\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n\n/** Timeout interval before the pending batch is sent. */\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n\n/**\n * Internal class to enqueue requests and automatically send/process batches.\n *\n * The underlying batching mechanism is loosely based on ethers.js's\n * `JsonRpcBatchProvider`.\n *\n * @internal\n */\nexport class RequestBatcher {\n  /** Timeout timer that periodically sends the pending batch. */\n  private pendingBatchTimer: NodeJS.Timer | undefined;\n\n  /**\n   * Array of enqueued requests along with the constructed promise handlers for\n   * each request.\n   */\n  private pendingBatch: Array<BatchRequest> = [];\n\n  constructor(\n    private readonly sendBatchFn: SendBatchFn,\n    private readonly maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE\n  ) {}\n\n  /**\n   * Enqueues the provided request. The batch is immediately sent if the maximum\n   * batch size is reached. Otherwise, the request is enqueued onto a batch that\n   * is sent after 10ms.\n   *\n   * Returns a promise that resolves with the result of the request.\n   */\n  async enqueueRequest(request: JsonRpcRequest): Promise<any> {\n    const inflightRequest: BatchRequest = {\n      request,\n      resolve: undefined,\n      reject: undefined\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this.pendingBatch.push(inflightRequest);\n\n    if (this.pendingBatch.length === this.maxBatchSize) {\n      // Send batch immediately if we are at the maximum batch size.\n      void this.sendBatchRequest();\n    } else if (!this.pendingBatchTimer) {\n      // Schedule batch for next event loop + short duration\n      this.pendingBatchTimer = setTimeout(\n        () => this.sendBatchRequest(),\n        DEFAULT_REQUEST_BATCH_DELAY_MS\n      );\n    }\n\n    return promise;\n  }\n\n  /**\n   * Sends the currently queued batches and resets the batch and timer. Processes\n   * the batched response results back to the original promises.\n   */\n  private async sendBatchRequest(): Promise<void> {\n    // Get the current batch and clear it, so new requests\n    // go into the next batch\n    const batch = this.pendingBatch;\n    this.pendingBatch = [];\n    if (this.pendingBatchTimer) {\n      clearTimeout(this.pendingBatchTimer);\n      this.pendingBatchTimer = undefined;\n    }\n\n    // Get the request as an array of requests\n    const request = batch.map(inflight => inflight.request);\n\n    return this.sendBatchFn(request).then(\n      result => {\n        // For each result, feed it to the correct Promise, depending\n        // on whether it was a success or error\n        batch.forEach((inflightRequest, index) => {\n          const payload = result[index];\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            (error as any).code = payload.error.code;\n            (error as any).data = payload.error.data;\n            inflightRequest.reject!(error);\n          } else {\n            inflightRequest.resolve!(payload.result);\n          }\n        });\n      },\n      error => {\n        batch.forEach(inflightRequest => {\n          inflightRequest.reject!(error);\n        });\n      }\n    );\n  }\n}\n\n/** Function type to match the `fetchJson` function in ethers. */\ntype SendBatchFn = (reqs: JsonRpcRequest[]) => Promise<JsonRpcResponse[]>;\n\n/**\n * Internal interface to represent a request on a batch along with the promises to resolve it.\n */\ninterface BatchRequest {\n  request: JsonRpcRequest;\n  resolve?: (result: any) => void;\n  reject?: (error: Error) => void;\n}\n","import {\n  Network as NetworkFromEthers,\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { deepCopy } from '@ethersproject/properties';\nimport {\n  CommunityResourcable,\n  JsonRpcProvider\n} from '@ethersproject/providers';\nimport { ConnectionInfo, fetchJson } from '@ethersproject/web';\n\nimport { JsonRpcRequest, JsonRpcResponse } from '../internal/internal-types';\nimport { RequestBatcher } from '../internal/request-batcher';\nimport { Network } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_NETWORK,\n  EthersNetwork,\n  getAlchemyHttpUrl,\n  getAlchemyWsUrl\n} from '../util/const';\nimport { logWarn } from '../util/logger';\nimport { IS_BROWSER } from '../util/util';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\n *\n * @public\n */\nexport class AlchemyProvider\n  extends JsonRpcProvider\n  implements CommunityResourcable\n{\n  readonly apiKey: string;\n  readonly maxRetries: number;\n  readonly batchRequests: boolean;\n\n  /**\n   * VISIBLE ONLY FOR TESTING\n   *@internal\n   */\n  readonly batcher: RequestBatcher;\n\n  /** @internal */\n  constructor(config: AlchemyConfig) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'http'\n    );\n\n    // If a hardcoded url was specified in the config, use that instead of the\n    // provided apiKey or network.\n    if (config.url !== undefined) {\n      connection.url = config.url;\n    }\n\n    connection.throttleLimit = config.maxRetries;\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(connection, ethersNetwork);\n\n    this.apiKey = config.apiKey;\n    this.maxRetries = config.maxRetries;\n    this.batchRequests = config.batchRequests;\n\n    // TODO: support individual headers when calling batch\n    const batcherConnection = { ...this.connection };\n    batcherConnection.headers!['Alchemy-Ethers-Sdk-Method'] = 'batchSend';\n    const sendBatchFn = (\n      requests: JsonRpcRequest[]\n    ): Promise<JsonRpcResponse[]> => {\n      return fetchJson(batcherConnection, JSON.stringify(requests));\n    };\n    this.batcher = new RequestBatcher(sendBatchFn);\n  }\n\n  /**\n   * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\n   * ethers.js. Returns the API key for an Alchemy provider.\n   *\n   * @internal\n   * @override\n   */\n  static getApiKey(apiKey: any): string {\n    if (apiKey == null) {\n      return DEFAULT_ALCHEMY_API_KEY;\n    }\n    if (apiKey && typeof apiKey !== 'string') {\n      throw new Error(\n        `Invalid apiKey '${apiKey}' provided. apiKey must be a string.`\n      );\n    }\n    return apiKey;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Converts the `Networkish` input to the network enum used by Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyNetwork(network?: Networkish): Network {\n    if (network === undefined) {\n      return DEFAULT_NETWORK;\n    }\n\n    if (typeof network === 'number') {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be a string.`\n      );\n    }\n\n    // Guaranteed that `typeof network === 'string`.\n    const isValidNetwork = Object.values(Network).includes(network as Network);\n    if (!isValidNetwork) {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be one of: ` +\n          `${Object.values(Network).join(', ')}.`\n      );\n    }\n    return network as Network;\n  }\n\n  /**\n   * Returns a {@link ConnectionInfo} object compatible with ethers that contains\n   * the correct URLs for Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyConnectionInfo(\n    network: Network,\n    apiKey: string,\n    type: 'wss' | 'http'\n  ): ConnectionInfo {\n    const url =\n      type === 'http'\n        ? getAlchemyHttpUrl(network, apiKey)\n        : getAlchemyWsUrl(network, apiKey);\n    return {\n      headers: IS_BROWSER\n        ? {\n            'Alchemy-Ethers-Sdk-Version': VERSION\n          }\n        : {\n            'Alchemy-Ethers-Sdk-Version': VERSION,\n            'Accept-Encoding': 'gzip'\n          },\n      allowGzip: true,\n      url\n    };\n  }\n\n  /**\n   * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\n   * method is called when calling methods on the parent class `BaseProvider`.\n   *\n   * @override\n   */\n  async detectNetwork(): Promise<NetworkFromEthers> {\n    let network = this.network;\n    if (network == null) {\n      network = await super.detectNetwork();\n\n      if (!network) {\n        throw new Error('No network detected');\n      }\n    }\n    return network;\n  }\n\n  _startPending(): void {\n    logWarn('WARNING: Alchemy Provider does not support pending filters');\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * Overrides the base {@link JsonRpcProvider.send} method to implement custom\n   * logic for sending requests to Alchemy.\n   *\n   * @param method The method name to use for the request.\n   * @param params The parameters to use for the request.\n   * @override\n   * @public\n   */\n  // TODO: Add headers for `perform()` override.\n  send(method: string, params: Array<any>): Promise<any> {\n    return this._send(method, params, 'send');\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `JsonRpcProvider.send()`.\n   *\n   * This method is copied over directly in order to implement custom headers\n   *\n   * @internal\n   */\n  _send(\n    method: string,\n    params: Array<any>,\n    methodName: string,\n    forceBatch = false\n  ): Promise<any> {\n    const request = {\n      method,\n      params,\n      id: this._nextId++,\n      jsonrpc: '2.0'\n    };\n\n    // START MODIFIED CODE\n    const connection = { ...this.connection };\n    connection.headers!['Alchemy-Ethers-Sdk-Method'] = methodName;\n\n    if (this.batchRequests || forceBatch) {\n      return this.batcher.enqueueRequest(request as JsonRpcRequest);\n    }\n    // END MODIFIED CODE\n\n    this.emit('debug', {\n      action: 'request',\n      request: deepCopy(request),\n      provider: this\n    });\n\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(\n      this.connection,\n      JSON.stringify(request),\n      getResult\n    ).then(\n      result => {\n        this.emit('debug', {\n          action: 'response',\n          request,\n          response: result,\n          provider: this\n        });\n\n        return result;\n      },\n      error => {\n        this.emit('debug', {\n          action: 'response',\n          error,\n          request,\n          provider: this\n        });\n\n        throw error;\n      }\n    );\n\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        // @ts-ignore - This is done by ethers.\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n}\n\n/**\n * DO NOT MODIFY.\n *\n * Original code copied over from ether.js's\n * `@ethersproject/web/src.ts/index.ts`. Used to support\n * {@link AlchemyProvider._send}, which is also copied over.\n */\nfunction getResult(payload: {\n  error?: { code?: number; data?: any; message?: string };\n  result?: any;\n}): any {\n  if (payload.error) {\n    const error: any = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n","'use strict'\nvar ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'\n\n// pre-compute lookup table\nvar ALPHABET_MAP = {}\nfor (var z = 0; z < ALPHABET.length; z++) {\n  var x = ALPHABET.charAt(z)\n\n  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')\n  ALPHABET_MAP[x] = z\n}\n\nfunction polymodStep (pre) {\n  var b = pre >> 25\n  return ((pre & 0x1FFFFFF) << 5) ^\n    (-((b >> 0) & 1) & 0x3b6a57b2) ^\n    (-((b >> 1) & 1) & 0x26508e6d) ^\n    (-((b >> 2) & 1) & 0x1ea119fa) ^\n    (-((b >> 3) & 1) & 0x3d4233dd) ^\n    (-((b >> 4) & 1) & 0x2a1462b3)\n}\n\nfunction prefixChk (prefix) {\n  var chk = 1\n  for (var i = 0; i < prefix.length; ++i) {\n    var c = prefix.charCodeAt(i)\n    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'\n\n    chk = polymodStep(chk) ^ (c >> 5)\n  }\n  chk = polymodStep(chk)\n\n  for (i = 0; i < prefix.length; ++i) {\n    var v = prefix.charCodeAt(i)\n    chk = polymodStep(chk) ^ (v & 0x1f)\n  }\n  return chk\n}\n\nfunction encode (prefix, words, LIMIT) {\n  LIMIT = LIMIT || 90\n  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')\n\n  prefix = prefix.toLowerCase()\n\n  // determine chk mod\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') throw new Error(chk)\n\n  var result = prefix + '1'\n  for (var i = 0; i < words.length; ++i) {\n    var x = words[i]\n    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')\n\n    chk = polymodStep(chk) ^ x\n    result += ALPHABET.charAt(x)\n  }\n\n  for (i = 0; i < 6; ++i) {\n    chk = polymodStep(chk)\n  }\n  chk ^= 1\n\n  for (i = 0; i < 6; ++i) {\n    var v = (chk >> ((5 - i) * 5)) & 0x1f\n    result += ALPHABET.charAt(v)\n  }\n\n  return result\n}\n\nfunction __decode (str, LIMIT) {\n  LIMIT = LIMIT || 90\n  if (str.length < 8) return str + ' too short'\n  if (str.length > LIMIT) return 'Exceeds length limit'\n\n  // don't allow mixed case\n  var lowered = str.toLowerCase()\n  var uppered = str.toUpperCase()\n  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str\n  str = lowered\n\n  var split = str.lastIndexOf('1')\n  if (split === -1) return 'No separator character for ' + str\n  if (split === 0) return 'Missing prefix for ' + str\n\n  var prefix = str.slice(0, split)\n  var wordChars = str.slice(split + 1)\n  if (wordChars.length < 6) return 'Data too short'\n\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') return chk\n\n  var words = []\n  for (var i = 0; i < wordChars.length; ++i) {\n    var c = wordChars.charAt(i)\n    var v = ALPHABET_MAP[c]\n    if (v === undefined) return 'Unknown character ' + c\n    chk = polymodStep(chk) ^ v\n\n    // not in the checksum?\n    if (i + 6 >= wordChars.length) continue\n    words.push(v)\n  }\n\n  if (chk !== 1) return 'Invalid checksum for ' + str\n  return { prefix: prefix, words: words }\n}\n\nfunction decodeUnsafe () {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n}\n\nfunction decode (str) {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n\n  throw new Error(res)\n}\n\nfunction convert (data, inBits, outBits, pad) {\n  var value = 0\n  var bits = 0\n  var maxV = (1 << outBits) - 1\n\n  var result = []\n  for (var i = 0; i < data.length; ++i) {\n    value = (value << inBits) | data[i]\n    bits += inBits\n\n    while (bits >= outBits) {\n      bits -= outBits\n      result.push((value >> bits) & maxV)\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      result.push((value << (outBits - bits)) & maxV)\n    }\n  } else {\n    if (bits >= inBits) return 'Excess padding'\n    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'\n  }\n\n  return result\n}\n\nfunction toWordsUnsafe (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n}\n\nfunction toWords (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nfunction fromWordsUnsafe (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n}\n\nfunction fromWords (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nmodule.exports = {\n  decodeUnsafe: decodeUnsafe,\n  decode: decode,\n  encode: encode,\n  toWordsUnsafe: toWordsUnsafe,\n  toWords: toWords,\n  fromWordsUnsafe: fromWordsUnsafe,\n  fromWords: fromWords\n}\n"],"names":["logger","Logger","ethDefaultProvider","network","func","providers","options","providerList","InfuraProvider","infura","push","error","EtherscanProvider","etherscan","AlchemyProvider","alchemy","PocketProvider","pocket","provider","indexOf","name","CloudflareProvider","cloudflare","AnkrProvider","ankr","length","FallbackProvider","quorum","renetwork","etcDefaultProvider","url","JsonRpcProvider","homestead","chainId","ensAddress","_defaultProvider","ropsten","classicMordor","networks","unspecified","mainnet","morden","testnet","rinkeby","kovan","goerli","kintsugi","sepolia","classic","classicMorden","classicTestnet","classicKotti","xdai","matic","maticmum","optimism","arbitrum","bnb","bnbt","getNetwork","standard","throwArgumentError","value","defaultProvider","version","Formatter","this","formats","getDefaultFormats","address","bind","bigNumber","blockTag","data","hash","hex","number","type","transaction","accessList","allowNull","blockHash","blockNumber","transactionIndex","confirmations","from","gasPrice","maxPriorityFeePerGas","maxFeePerGas","gasLimit","to","nonce","r","uint256","s","v","creates","raw","transactionRequest","receiptLog","transactionHash","topics","arrayOf","logIndex","receipt","contractAddress","root","gasUsed","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","status","block","parentHash","timestamp","difficulty","miner","extraData","transactions","baseFeePerGas","blockWithTransactions","shallowCopy","transactionResponse","filter","fromBlock","undefined","toBlock","filterLog","removed","boolean","allowFalsish","accessListify","BigNumber","toNumber","toLowerCase","Error","strict","substring","isHexString","result","getAddress","hexDataSlice","getContractAddress","hexValue","hexDataLength","hexZeroPad","format","author","_difficulty","check","_block","gas","isZero","input","networkId","parseInt","replace","parseTransaction","byzantium","Array","isArray","map","object","key","checkKey","checkValue","nullValue","replaceValue","array","forEach","checkTopic","topic","serializeTopics","slice","pop","unique","sorted","Object","keys","sort","join","getEventTag","eventName","ForkEvent","warn","getTime","Date","stall","duration","Promise","resolve","setTimeout","PollableEvents","Event","tag","listener","once","defineReadOnly","_lastBlockNumber","_inflight","split","comps","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","toHexString","base58Encode","Base58","concat","sha256","matcherIpfs","RegExp","matchers","_parseString","start","toUtf8String","_parseBytes","offset","getIpfsLink","link","match","numPad","arrayify","padded","Uint8Array","set","bytesPad","Math","ceil","encodeBytes","datas","byteCount","i","hexConcat","Resolver","resolvedAddress","formatter","_supportsEip2544","call","then","eq","catch","code","selector","parameters","tx","ccipReadEnabled","namehash","parseBytes","supportsWildcard","dnsEncode","throwError","_fetch","coinType","hexBytes","coinInfo","String","operation","bytes","words","bech32","unshift","callAddress","_fetchBytes","_getAddress","linkage","content","getText","avatar","scheme","_resolvedAddress","owner","addr","tokenId","tokenOwner","balance","toString","metadataUrl","fetchJson","metadata","JSON","stringify","imageUrl","image","ipfs","ipns","swarm","skynet","urlSafe","base64Encode","a","keyBytes","toUtf8Bytes","hexlify","defaultFormatter","nextPollId","BaseProvider","_events","_emitted","disableCcipRead","getFormatter","anyNetwork","detectNetwork","_networkPromise","_ready","knownNetwork","getStatic","emit","_maxInternalBlockNumber","_maxFilterBlockRange","_pollingInterval","_fastQueryDate","_network","poll","event","calldata","urls","sender","errorMessages","href","json","errorPassThrough","response","statusCode","errorMessage","message","m","maxAge","_internalBlockNumber","internalBlockNumber","respTime","reqTime","checkInternalBlockNumber","resolveProperties","perform","networkError","_setFastBlockNumber","pollId","runners","_getInternalBlockNumber","pollingInterval","abs","makeError","previousBlockNumber","eventBlockNumber","runner","getTransactionReceipt","minFromBlock","getLogs","log","all","polling","currentNetwork","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","now","getBlockNumber","timeout","_waitForTransaction","replaceable","reject","cancelFuncs","done","alreadyDone","minedHandler","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","__awaiter","getTransactionCount","getTransaction","mined","getBlockWithTransactions","ti","waitForTransaction","reason","cancelled","replacement","_wrapTransaction","timer","unref","clearTimeout","method","addressOrName","_getBlockTag","params","position","p","expectedHash","returnedHash","wait","confirms","signedTransaction","t","hexTx","values","attempt","redirects","txSender","signature","urlsOffset","urlsLength","urlsData","u","callbackSelector","ccipReadFetch","ccipResult","_call","_getTransactionRequest","resolved","resolveName","blockHashOrBlockTag","includeTransactions","blockWithTxs","oncePoll","_getBlock","_getFilter","currentName","_getResolver","resolver","addrData","getResolver","node","resolverAddr","nameOrAddress","resolverAddress","getAvatar","e","pollable","_startEvent","_addEventListener","args","stopped","eventTag","apply","_stopEvent","removeAllListeners","found","Provider","errorGas","spelunk","requireData","parse","checkError","body","responseText","getResult","payload","getLowerCase","_constructorGuard","JsonRpcSigner","constructorGuard","addressOrIndex","UncheckedJsonRpcSigner","_address","_index","send","accounts","fromAddress","estimate","estimateGas","constructor","hexlifyTransaction","action","sendUncheckedTransaction","messageData","domain","types","_TypedDataEncoder","populated","password","Signer","allowedTransactionKeys","networkOrReady","freeze","_nextId","_eventLoopCache","_cache","_uncachedDetectNetwork","serverError","getSigner","connectUnchecked","request","id","jsonrpc","deepCopy","cache","connection","getFeeData","feeData","prepareRequest","_startPending","_pendingFilter","self","pendingFilter","filterId","hashes","seq","listenerCount","allowExtra","allowed","checkProperties","getUrl","headers","skipFetchSetup","mode","credentials","redirect","referrer","fetchOptions","opts","fetch","arrayBuffer","get","statusMessage","statusText","staller","bodyify","isBytesLike","trim","processFunc","updated","k","attemptLimit","throttleLimit","assertArgument","throttleCallback","throttleSlotInterval","allow304","allowGzip","user","allowInsecureAuthentication","argument","authorization","reData","dataMatch","base64Decode","fromCharCode","requestBody","requestMethod","flatHeaders","header","runningTimeout","promise","cancel","runningFetch","location","tryAgain","retryAfter","random","pow","throttleRetry","race","_fetchData","floor","ceiling","interval","retryLimit","onceBlock","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","off","_logLevel","_globalLogger","LogLevel","ErrorCode","_normalizeError","missing","form","normalize","_checkNormalize","HEX","defineProperty","enumerable","writable","logLevel","level","console","_log","levels","DEBUG","INFO","WARNING","errors","UNKNOWN_ERROR","messageDetails","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","INVALID_ARGUMENT","condition","UNSUPPORTED_OPERATION","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","target","kind","censorship","permanent","globalLogger","opaque","bigint","string","_isFrozen","isFrozen","_deepCopy","item","RequestBatcher","sendBatchFn","maxBatchSize","inflightRequest","pendingBatch","sendBatchRequest","pendingBatchTimer","batch","inflight","index","config","apiKey","getApiKey","alchemyNetwork","getAlchemyNetwork","getAlchemyConnectionInfo","maxRetries","ethersNetwork","EthersNetwork","batchRequests","batcherConnection","batcher","requests","_super","logWarn","DEFAULT_ALCHEMY_API_KEY","_send","methodName","forceBatch","enqueueRequest","CustomNetworks","getNetworkFromEthers","DEFAULT_NETWORK","Network","includes","getAlchemyHttpUrl","getAlchemyWsUrl","IS_BROWSER","VERSION","ALPHABET","ALPHABET_MAP","z","x","charAt","TypeError","polymodStep","pre","b","prefixChk","chk","c","charCodeAt","__decode","str","LIMIT","lowered","uppered","toUpperCase","lastIndexOf","wordChars","convert","inBits","outBits","pad","bits","maxV","module","exports","decodeUnsafe","res","arguments","decode","encode","toWordsUnsafe","toWords","fromWordsUnsafe","fromWords"],"sourceRoot":""}